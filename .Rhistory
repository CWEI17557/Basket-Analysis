q()
install.packages("sas7bdat")
library ("sas7bdat")
input<-read.sas7bdat("C:\\Users\\cwei1\\OneDrive\\Documents\\Data Analysis\\Power BI\\Chapter_2_05_SASdata.sas7bdat")
search()
search()
library(Hmisc)
library ("sas7bdat")
L
L<-6
L
l
.l<-6
.l
a<-6
a<-aaa
a<-"aaa"
.l<-6
.l
._l=5
._l
2+3
2+3
L<-(2+3)
L<-2+3
L<-(2+3)
L<-2+3
2+3
L<-(2+3)
L
L<-2+3
L
1:50
1:50
1:50,2
[1:50,2]
1:50,2
1:50 2
1:50:2
1:50:2
1:25*2
1:25*2
50:1
25:1*2
seq(50,1,-2)
a<-123.456789
a
options(digits=3)
a
a<-12345.456789
a
options(digits=8)
a
a<-12345.456789
a
options(digits=3)
a<-12345.456789
a
options(digits=3)
a
a<-12345.456789
options(digits=3)
a
a<-12345.456789
options(digits=8)
a
x <- 2
x
y =3
y
X+y ->A
x+y ->A
x+y
A
x <- 2
y =3
x+y ->A
A
B<<-x*y
B
x/y->>C
D<<-x/y
D<<-x*y
B<<-x*y
D<<-x*y
x+y ->A
f<<-x*y
D<<-x*y
x/y->>C
x*y->>C
ad<<-x*y
x*y->>ar
rt<<-x*y
x <- 2
y =3
x+y ->A
rt<<-x*y
wew<<-x*y
c =3
C =3
x <- 2
y =3
x+y ->A
wew<<-x*y
x*y->>ar
x <- 2
y =3
x+y ->A
B<<-x*y
x/y->>ac
A
B
ac
C
x/y->>C
C
x/y->C
C
x <- 2
y =3
x+y ->A
B<<-x*y
x/y->>C
x/y->C
A
B
C
workshop <- c( 1, 2, 1, 2, 1, 2, 1, 2 )
workshop
mode(workshop)
workshop <- c( 1, 2, 1, 2, 1, 2, 1, 2 ,"AA")
mode(workshop)
typeof(workshop)
typeof(workshop)
workshop <- c( 1, 2, 1, 2, 1, 2, 1, 2 )
mode(workshop)
typeof(workshop)
gender <- c("f", "f", "f", NA, "m", "m", "m", "m")
gender
q1 <- c(1, 2, 2, 3, 4, 5, 5, 4)
q2 <- c(1, 1, 2, 1, 5, 4, 3, 5)
q3 <- c(5, 4, 4,”NA”, 2, 5, 4, 5)
q3 <- c(5, 4, 4,"NA", 2, 5, 4, 5)
q3 <- c(5, 4, 4,"1", 2, 5, 4, 5)
q3 <- c(5, 4, 4,NA, 2, 5, 4, 5)
q4 <- c(1, 1, 3, 3, 4, 5, 4, 5)
q1 <- c(1, 2, 2, 3, 4, 5, 5, 4)
q2 <- c(1, 1, 2, 1, 5, 4, 3, 5)
q3 <- c(5, 4, 4,NA, 2, 5, 4, 5)
q4 <- c(1, 1, 3, 3, 4, 5, 4, 5)
mySum <- q1 + q2 + q3 + q4
mySum
remove(workshop)
myShortVector <- c(10, 100)
mySum <- q1 + myShortVector
mySum
myShortVector <- c(10, 100,100)
mySum <- q1 + myShortVector
mySum
myShortVector <- c(10, 100,100)
mySum <- q1 + myShortVector
mySum
myShortVector <- c(10, 100,1000)
mySum <- q1 + myShortVector
mySum
myShortVector <- c(10, 100 )
mySub <- q1 - myShortVector
mySub
#"Transpose" of a Vector#
q1T<- t(q1)
q1T
is.vector(q1)
sqrt(q1)
is.vector(q1)
q1 <- c(1, 2, 2, 3, 4, 5, 5, 4,10)
q2 <- c(1, 1, 2, 1, 5, 4, 3, 5)
q3 <- c(5, 4, 4,NA, 2, 5, 4, 5)
q4 <- c(1, 1, 3, 3, 4, 5, 4, 5)
mySum <- q1 + q2 + q3 + q4
q1 <- c(1, 2, 2, 3, 4, 5, 5, 4,10)
q2 <- c(1, 1, 2, 1, 5, 4, 3, 5)
q3 <- c(5, 4, 4,NA, 2, 5, 4, 5)
q4 <- c(1, 1, 3, 3, 4, 5, 4, 5)
mySum <- q1 + q2 + q3 + q4
q1 <- c(1, 2, 2, 3, 4, 5, 5, 4,10)
q2 <- c(1, 1, 2, 1, 5, 4, 3, 5)
q3 <- c(5, 4, 4,NA, 2, 5, 4, 5)
q4 <- c(1, 1, 3, 3, 4, 5, 4, 5)
mySum <- q1 + q2 + q3 + q4
mySum
table(workshop)
workshop <- c( 1, 2, 1, 2, 1, 2, 1, 2 )
table(workshop)
workshop <- c( 1, 2, 1, 2, NA, 2, 1, 2 )
table(workshop)
gender <- c("f", "f", "f", NA, "m", "m", "m", "m")
table(gender)
table(gender).__C__.NULL
table(gender).NULL
q3 <- c(5, 4, 4,NA, 2, 5, 4, 5)
mean(q3)
mean(q3, na.rm=ture)
mean(q3, na.rm=TRUE)
table(gender, na.rm=TRUE)
table(gender, na.rm=FALSE)
q1[5]
q1 <- c(1, 2, 2, 3, 4, 5, 5, 4)
> q1[c(5, 6, 7, 8)]
q1[c(5, 6, 7, 8)]
q1[5:8]
q1[gender == "m"]
q1 <- c(1, 2, 2, 3, 4, 5, 5, 4)
gender <- c("f", "f", "f", NA, "m", "m", "m", "m")
q1[gender == "m"]
mean(q1[gender == "m"], na.rm = TRUE)
q1[gender == "f"]
q1 <- c(1, 2, 2, 3, 4, 5, 5, 4,999)
gender <- c("m", "f", "f", NA, "m", "m", "m", "m")
q1[gender == "m"]
q1 <- c(1, 2, 2, 3, 4, 5, 5, 4)
gender <- c("f", "f", "f", NA, "m", "m", "m", "m" , "m")
q1[gender == "m"]
q1     <- c(1,    2,   2,   3,   4,   5,  5,   4, 999)
gender <- c("m", "f", "f", NA, "m", "m", "m", "m")
q1[gender == "m"]
q1 <- c(1, 2, 2, 3, 4, 5, 5, 4)
gender <- c("m", "f", "f", NA, "m", "m", "m", "m" , "m")
q1[gender == "m"]
q1     <- c(1,    2,   2,   3,   4,   5,  5,   4, 999)
gender <- c("f", "f", "f", NA, "m", "m", "m", "m")
q1[gender == "m"]
> q1     <- c( 1,   2,   2,   3,  4,   5,   5,   4, 999)
q1     <- c( 1,   2,   2,   3,  4,   5,   5,   4, 999)
gender <- c("f", "f", "f", NA, "m", "m", "m", "m")
q1[gender == "m"]
# import csv file
setwd("C:\\Users\\cwei1\\OneDrive\\Documents\\Data Analysis\\Job\\Project")
groceries<- read.csv("trans_basket.csv",strip.white =TRUE, na.strings ="" )
head(groceries,15)
sum(is.na(groceries))
summary(groceries)
distinct_count <- length(unique(groceries$COMMODITY_DESC))
distinct_count <- length(unique(groceries$COMMODITY_DESC))
distinct_count
library(plyr)
library(dplyr)
# Transform data into a transactional dataset
itemList <- ddply(groceries, c("BASKET_ID"), function(df1)paste(df1$COMMODITY_DESC,collapse = ","))
head(itemList,6)
summary(itemList)
itemList %>% select(V1) %>% setNames(c("itemList")) %>% head
itemList<-itemList %>% select(V1) %>% setNames(c("itemList"))
write.csv(itemList,"ItemList.csv", quote = FALSE, row.names = TRUE)
# Convert CSV file to Basket Format
library(arules)
txn = read.transactions(file="ItemList.csv", rm.duplicates= TRUE, format="basket",sep=",",cols=1);
inspect(txn[1:20])
library(arulesViz)
library(datasets)
# Create an item frequency plot for the top 10 items
itemFrequencyPlot(txn,topN=10,type="absolute")
# Create an item frequency plot for the top 10 items
itemFrequencyPlot(txn,topN=10,type="absolute")
# Extract the set of most frequent item sets
itemsets = apriori(txn,parameter = list(support = 0.03, target = 'frequent'))
length(itemsets)
# Inspect the five most popular items
inspect(sort(itemsets, by='support', decreasing = T))
# rules
rules = apriori(txn,
parameter = list(supp=0.03, conf=0.4, minlen=2),
control = list(verbose=F))  # 控制是否在函数运行过程中显示详细的输出信息
groceries<- read.csv("trans_basket.csv",strip.white =TRUE, na.strings ="" )
# Expolre data
head(groceries,15)
# Extract the set of most frequent item sets
itemsets = apriori(txn,parameter = list(support = 0.03, target = 'frequent'))
length(itemsets)
# Inspect the five most popular items
inspect(sort(itemsets, by='support', decreasing = T))
# rules
rules = apriori(txn,
parameter = list(supp=0.03, conf=0.4, minlen=2),
control = list(verbose=F))
length(rules)
rules<- sort(rules,by="confidence",descreasing = TRUE)
rules<- sort(rules,by="support",descreasing = TRUE)
inspect(rules)
inspectDT(rules)
plot(rules)
plot(rules[1:20], method="paracoord")
saveWidget(  inspectDT(rules) , "Basket Detail Report.html")
library(DT)
saveWidget(  inspectDT(rules) , "Basket Detail Report.html")
# rules 2
rules2<-apriori(data=txn, parameter=list(supp=0.01,conf = 0.3, minlen=2),
appearance = list(default="lhs",rhs="LUNCHMEAT"),
control = list(verbose=F))
length(rules2)
rules2<-sort(rules2, decreasing=TRUE,by="confidence")
inspect(rules2[1:10])
# rules
rules = apriori(txn,
parameter = list(supp=0.03, conf=0.4, minlen=2),
control = list(verbose=F))
length(rules)
rules<- sort(rules,by="confidence",descreasing = TRUE)
inspect(rules)
inspectDT(rules)
plot(rules)
plot(rules[1:20], method="paracoord")
ruleExplorer(rules)
rules<- sort(rules,by="confidence",descreasing = TRUE)
inspect(rules)
inspectDT(rules)
plot(rules)
plot(rules[1:20], method="paracoord")
# rules 2
rules2<-apriori(data=txn,
parameter=list(supp=0.01,conf = 0.3, minlen=2),
appearance = list(default="lhs",rhs="LUNCHMEAT"),
control = list(verbose=F))
length(rules2)
rules2<-sort(rules2, decreasing=TRUE,by="confidence")
inspect(rules2[1:10])
ruleExplorer(rules2)
plot(rules2[1:5], method="paracoord")
plot(rules2[1:5], method="paracoord")
plot(rules2[1:5], method="paracoord")
# rules 1
rules1<-apriori(data=txn, parameter=list(supp=0.001,conf = 0.05,minlen=2),
appearance = list(default="rhs",lhs="LUNCHMEAT"),
control = list(verbose=F))
length(rules1)
rules1<-sort(rules1, decreasing=TRUE,by="confidence")
inspect(rules1)
ruleExplorer(rules1)
plot(rules1[1:10], method="paracoord")
plot(rules2[1:5], method="paracoord")
# rules 2
rules2<-apriori(data=txn,
parameter=list(supp=0.01,conf = 0.3, minlen=2),
appearance = list(default="lhs",rhs="CHEESE"),
control = list(verbose=F))
length(rules2)
rules2<-sort(rules2, decreasing=TRUE,by="confidence")
inspect(rules2[1:10])
plot(rules2[1:5], method="paracoord")
plot(rules[1:10], method="paracoord", main="Top 10 Confidence")
# rules
rules = apriori(txn,
parameter = list(supp=0.03, conf=0.4, minlen=2),
control = list(verbose=F))
length(rules)
rules<- sort(rules,by="confidence",descreasing = TRUE)
inspect(rules)
plot(rules)
plot(rules[1:10], method="paracoord", main="Top 10 Confidence")
rules<- sort(rules,by="confidence",descreasing = FALSE)
inspect(rules)
plot(rules[1:10], method="paracoord", main="Top 10 Confidence")
plot(rules[1:10], method="paracoord", main="Top 10 Confidence")
plot(rules[1:10], method="paracoord", main="Parallel Coordinated plot Top 10 Confidence")
plot(rules2[1:5], method="paracoord")
plot(rules2[1:5], method="paracoord", main="Parallel Coordinated plot for cheese")
# rules 1
rules1<-apriori(data=txn, parameter=list(supp=0.001,conf = 0.05,minlen=2),
appearance = list(default="rhs",lhs="LUNCHMEAT"),
control = list(verbose=F))
length(rules1)
rules1<-sort(rules1, decreasing=TRUE,by="confidence")
inspect(rules1)
plot(rules1[1:10], method="paracoord")
plot(rules1[1:5], method="paracoord")
plot(rules2[1:5], method="paracoord", main="Who is most likely to purchase cheese.")
plot(rules2[1:5], method="paracoord", main="Who is most likely to purchase cheese")
# rules 2
rules2<-apriori(data=txn,
parameter=list(supp=0.01,conf = 0.3, minlen=2),
appearance = list(default="lhs",rhs="BEEF"),
control = list(verbose=F))
length(rules2)
rules2<-sort(rules2, decreasing=TRUE,by="confidence")
inspect(rules2[1:10])
plot(rules2[1:5], method="paracoord", main="Who is most likely to purchase cheese")
# rules 2
rules2<-apriori(data=txn,
parameter=list(supp=0.01,conf = 0.3, minlen=2),
appearance = list(default="lhs",rhs="CHEESE"),
control = list(verbose=F))
length(rules2)
rules2<-sort(rules2, decreasing=TRUE,by="confidence")
plot(rules2[1:5], method="paracoord", main="Who is most likely to purchase cheese")
plot(rules1[1:5], method="paracoord", main="What product will be purchased with lunchmeat")
ruleExplorer(rules)
